#+TODO: OPEN | CLOSED
#+title: GitHub Scripts
#+author: Rich Loveland
#+email: r@rmloveland.com
#+options: num:nil toc:t

The scripts in this repo let you do simple things with GitHub issues
from the command line.

There are docs for each command listed below.  You can also just run
each command with no arguments to see the built-in help, e.g.,

#+BEGIN_EXAMPLE
$ gh-get-issues
Usage: gh-get-issues USER REPO [STATE]
#+END_EXAMPLE

Currently these scripts generate [[http://orgmode.org][Org mode]] output, but it'd be trivial
to update the templates to output Markdown or whatever else you like.

** gh-get-issues

   Gets all of the repo's open issues by default.  Returns a tree of Org headings.

   For example, if you call

   #+BEGIN_EXAMPLE
   $ gh-get-issues SeanTAllen flycheck-pony
   #+END_EXAMPLE

   you'll get the following Org output:

#+BEGIN_EXAMPLE
*** OPEN #4 Update README to show how to install using package.el             			   :flycheck-pony:
	:PROPERTIES:
	:URL:      https://github.com/SeanTAllen/flycheck-pony/issues/4
	:END:
#+END_EXAMPLE

** gh-get-issue

   Get one issue.  Returns an Org heading.

   For example, if you call

   #+BEGIN_EXAMPLE
   $ gh-get-issue prebid prebid.github.io 49   
   #+END_EXAMPLE

   you'll get the following Org output:

#+BEGIN_EXAMPLE
*** CLOSED #49 Document `pbjs.enableSendAllBids()` from an Ad Ops perspective             			   :prebid.github.io:
	:PROPERTIES:
	:URL:      https://github.com/prebid/prebid.github.io/issues/49
	:END:

	Basically, they need to set up one line item per bidder using the
	new "tagged" bidder-specific keywords.

#+END_EXAMPLE
** gh-create-issue

   Create an issue.  Returns an Org heading.

   For example, if you call

   #+BEGIN_EXAMPLE
   $ gh-create-issue rmloveland stix 'Write user documentation'
   #+END_EXAMPLE

   the command then pops up your =$EDITOR= so you can write a
   comment/description to go along with the issue's title.  (The
   comment must be formatted in Markdown.)
   
   You'll get the following Org output:

   #+BEGIN_EXAMPLE
*** OPEN #1 Write user documentation								   :stix:
	:PROPERTIES:
	:URL:      https://github.com/rmloveland/stix/issues/1
	:END:

	This code needs at least a few lines of docs on how to use this
	tool.
   
   #+END_EXAMPLE

** gh-set-issue-state

   #+BEGIN_EXAMPLE
   $ gh-set-issue-state USER REPO ISSUE-ID STATE
   #+END_EXAMPLE

   The state can be either 'open' or 'closed'.

   Quiet on success; dies with the HTTP error code on failure.

** gh-add-issue-comment

   #+BEGIN_EXAMPLE
   $ gh-add-issue-comment USER REPO ISSUE-ID
   #+END_EXAMPLE

   The command then pops up your =$EDITOR= so you can write the
   comment text.  (The comment must be formatted in Markdown.)

   Quiet on success; dies with the HTTP error code on failure.

# Local Variables:
# org-html-preamble: nil
# org-html-postamble: nil
# End:
